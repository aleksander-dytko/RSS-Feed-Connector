# Use the official Camunda distributions docker-compose configuration
# Reference: https://github.com/camunda/camunda-distributions/tree/main/docker-compose/versions/camunda-8.8
# This is a lightweight configuration with Orchestration (Zeebe + Operate + Tasklist), Connectors, and Elasticsearch

x-camunda-defaults: &camunda-defaults
  restart: unless-stopped
  networks:
    - camunda

services:
  orchestration: # Consolidated Zeebe + Operate + Tasklist
    <<: *camunda-defaults
    image: camunda/camunda:8.8.1
    container_name: orchestration
    ports:
      - "26500:26500"
      - "9600:9600"
      - "8088:8080"
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'exec 3<>/dev/tcp/127.0.0.1/9600 && echo -e \"GET /actuator/health/status HTTP/1.1\r\nHost: localhost\r\n\r\n\" >&3 && head -n 1 <&3'"]
      interval: 1s
      retries: 30
      start_period: 30s
    volumes:
      - zeebe:/usr/local/zeebe/data
    configs:
      - source: orchestration-config
        target: /usr/local/camunda/config/application.yaml
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Camunda Connectors - executes outbound and inbound connector logic
  connectors:
    <<: *camunda-defaults
    image: camunda/connectors-bundle:8.8.1
    container_name: connectors
    ports:
      - "8086:8080"
    environment:
      - management.endpoints.web.exposure.include=health,configprops
      - management.endpoint.health.probes.enabled=true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health/readiness"]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    configs:
      - source: connectors-config
        target: application.yaml
    depends_on:
      orchestration:
        condition: service_healthy

  elasticsearch: # Elasticsearch for secondary storage
    <<: *camunda-defaults
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - logger.org.elasticsearch.deprecation="OFF"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cat/health | grep -q green" ]
      interval: 1s
      retries: 30
      start_period: 30s
      timeout: 1s
    volumes:
      - elastic:/usr/share/elasticsearch/data

volumes:
  zeebe:
  elastic:

networks:
  camunda:

configs:
  connectors-config:
    content: |
      camunda:
        client:
          mode: self-managed
          grpc-address: http://orchestration:26500
          rest-address: http://orchestration:8080
        connectors:
          secretprovider:
            environment:
              prefix: "CONNECTORS_SECRET"

  orchestration-config:
    content: |
      management.endpoints.configprops.show-values: always
      camunda:
        system:
          cpu-thread-count: "3"
          io-thread-count: "3"
        security:
          authentication:
            method: "basic"
            unprotectedApi: true
          authorizations:
            enabled: false
          initialization:
            users:
              - username: "demo"
                password: "demo"
                name: "Demo User"
                email: "demo@demo.com"
            defaultRoles.admin.users:
              - "demo"
        database.index.numberOfReplicas: 0 # Single node elasticsearch so we disable replication
        data:
          secondary-storage:
            type: elasticsearch
            elasticsearch:
              cluster-name: elasticsearch
              url: "http://elasticsearch:9200"
