name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run tests
        run: mvn --batch-mode clean verify -DskipTests=false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports/
          retention-days: 7

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: connector-jar
          path: target/connector-rssfeed-*.jar
          
      - name: Upload element template
        uses: actions/upload-artifact@v4
        with:
          name: element-template
          path: element-templates/rss-feed-connector.json

  integration-test:
    name: Integration Test (E2E)
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: connector-jar
          path: target/

      - name: Start Camunda cluster
        run: |
          docker compose -f docker-compose.test.yml up -d
          
      - name: Wait for Camunda cluster to be healthy
        run: |
          echo "Waiting for Camunda cluster to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:9600/actuator/health; do sleep 2; done'
          
      - name: Start connector in Docker
        run: |
          # Find the JAR file
          JAR_FILE=$(ls target/connector-rssfeed-*.jar)
          echo "Found JAR: $JAR_FILE"
          ls -lh "$JAR_FILE"
          
          docker run -d \
            --name rssfeed-connector \
            --network host \
            -v $(pwd)/$JAR_FILE:/opt/app/connector.jar \
            -e CAMUNDA_CLIENT_BROKER_GATEWAY_ADDRESS=localhost:26500 \
            -e CAMUNDA_CLIENT_SECURITY_PLAINTEXT=true \
            camunda/connectors-bundle:8.8.1
          
      - name: Wait for connector to be ready
        run: |
          echo "Waiting for connector to register..."
          # Show all job workers to debug
          docker logs rssfeed-connector 2>&1 | grep "Starting job worker" || echo "No job workers found yet"
          timeout 30 bash -c 'until docker logs rssfeed-connector 2>&1 | grep -q "Starting job worker.*rssfeed"; do sleep 1; done'
          
      - name: Run integration tests
        run: |
          chmod +x .github/scripts/integration-test.sh
          .github/scripts/integration-test.sh
          
      - name: Show connector logs
        if: always()
        run: |
          echo "=== Connector Logs ==="
          docker logs rssfeed-connector || true
          
      - name: Cleanup
        if: always()
        run: |
          docker stop rssfeed-connector || true
          docker rm rssfeed-connector || true
          docker compose -f docker-compose.test.yml down -v || true

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: connector-jar
          path: target/
          
      - name: Download element template
        uses: actions/download-artifact@v4
        with:
          name: element-template
          path: element-templates/

      - name: Generate release notes
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}  # Strip 'v' prefix
          echo "Tag: ${TAG_NAME}, Version: ${VERSION}"
          echo "## Release ${TAG_NAME}" > release-notes.md
          echo "" >> release-notes.md
          if [ -f CHANGELOG.md ]; then
            # Extract release notes for this version from CHANGELOG (without 'v' prefix in search)
            # Skip the version header line and extract content until the next version
            awk "/^## \[${VERSION}\]/ {found=1; next} found && /^## \[/ {exit} found" CHANGELOG.md >> release-notes.md || true
            echo "Generated release notes:"
            cat release-notes.md
          else
            echo "Initial stable release" >> release-notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/connector-rssfeed-*.jar
            element-templates/rss-feed-connector.json
          body_path: release-notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

